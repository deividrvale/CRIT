THEORY strings     ;
LOGIC QF_INTARRAY  ;
SOLVER arrsolver   ;

SIGNATURE
  err : result ;
  strcpy       ;
  u            ;
  v            ;
  w            ;
  return       ;
  test         ;
  !ARRAY!Int   ;

RULES
  strcpy(dest, src) -> u(dest, src, 0) ;
  u(dest, src, i)   -> v(dest, src, i)                               [0 <= i < size(src) /\ select(src, i) # 0]       ;
  u(dest, src, i)   -> w(dest, src, i)                               [0 <= i < size(src) /\ select(src, i) = 0]       ;
  v(dest, src, i)   -> u(store(dest, i, select(src, i)), src, i + 1) [0 <= i < size(src) /\ i < size(dest)]           ;
  w(dest, src, i)   -> return(store(dest, i, 0), src)                [0 <= i < size(dest)]                            ;

  u(dest, src, i)   -> err                                           [i < 0 \/ size(src) <= i]                        ;
  v(dest, src, i)   -> err                                           [i < 0 \/ size(src) <= i \/ size(dest) <= i]     ;
  w(dest, src, i)   -> err                                           [i < 0 \/ size(dest) <= i]                       ;

  test(org, n, err)    -> false                                   ;
  test(org, n, return(dest, src)) -> false [org # src]            ;
  test(org, n, return(dest, src)) -> correspond(org, dest, 0, n)  ;

QUERY equivalence test(x, n, strcpy(y, x)) -><- true [0 <= n < size(x) /\ n < size(y) /\ nonzero(x, 0, n - 1) /\ select(x, n) = 0]

END OF FILE

This is a translation from the following C-program:

char *strcpy(char dest[], char src[]) {
  int i = 0;
  for (; src[i] != '\0'; i++) {
    dest[i] = src[i];
  }
  dest[i] = '\0';
  return dest;
}

The equivalence request does not compare strcpy to another function,
but simply tests whether the output always satisfies the property as
given by "test".

