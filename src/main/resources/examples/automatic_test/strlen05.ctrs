THEORY strings
LOGIC  QF_INTARRAY
SOLVER arrsolver
SIGNATURE



  mystrlen: IntArray => result;
  u_1: IntArray * Int => result;
  u_2: IntArray * Int * Int => result;
  u_3: IntArray * Int * Int => result;
  error: result;
  u_4: IntArray * Int * Int => result;
  u_5: IntArray * Int * Int => result;
  u_6: IntArray * Int * Int => result;
  u_7: IntArray * Int * Int => result;
  u_8: IntArray * Int * Int => result;
  return: IntArray * Int => result;

RULES



  mystrlen(x_1) -> u_1(x_1, rnd_1);
  u_1(x_1, k_2) -> u_2(x_1, k_2, 0);
  u_2(x_1, k_2, count_2) -> u_3(x_1, 0, count_2);
  u_3(x_1, k_2, count_2) -> error  [(0 > k_2 \/ k_2 >= size(x_1))];
  u_3(x_1, k_2, count_2) -> u_4(x_1, k_2, (count_2 + 1))  [((select(x_1, k_2) # 0) /\ (0 <= k_2 < size(x_1)))];
  u_4(x_1, k_2, count_2) -> u_5(x_1, k_2, count_2);
  u_3(x_1, k_2, count_2) -> u_6(x_1, k_2, count_2)  [((select(x_1, k_2) = 0) /\ (0 <= k_2 < size(x_1)))];
  u_5(x_1, k_2, count_2) -> u_7(x_1, k_2, count_2);
  u_7(x_1, k_2, count_2) -> u_8(x_1, (k_2 + 1), count_2);
  u_8(x_1, k_2, count_2) -> u_3(x_1, k_2, count_2);
  u_6(x_1, k_2, count_2) -> return(x_1, count_2);

QUERY  do-simplify [mystrlen] and equivalence mystrlen(x) -><- return(x, n) [0 <= n < size(x) /\ nonzero(x, 0, n - 1) /\ select(x, n) = 0]

