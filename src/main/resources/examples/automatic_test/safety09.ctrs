THEORY arrays
LOGIC  QF_INTARRAY
SOLVER arrsolver

SIGNATURE
  cstrchr: IntArray * Int => result_1;
  u_1: IntArray * Int * Int => result_1;
  u_2: IntArray * Int * Int => result_1;
  error_1: result_1;
  u_3: IntArray * Int * Int => result_1;
  return_1: IntArray * Int => result_1;
  main: Int * IntArray => result_2;
  u_4: Int * IntArray * Int => result_2;
  u_5: Int * IntArray * Int => result_2;
  error_2: result_2;
  u_6: Int * IntArray * Int * result_1 => result_2;
  u_7: Int * IntArray * Int * Int => result_2;
  u_8: Int * IntArray * Int * Int => result_2;
  u_9: Int * IntArray * Int => result_2;
  return_2: IntArray * Int => result_2;
  errortest;

RULES
  cstrchr(s_1, c_1) -> u_1(s_1, c_1, 0);
  u_1(s_1, c_1, i_2) -> u_2(s_1, c_1, i_2);
  u_2(s_1, c_1, i_2) -> error_1  [((0 > i_2 \/ i_2 >= size(s_1)) \/ (0 > i_2 \/ i_2 >= size(s_1)))];
  u_2(s_1, c_1, i_2) -> u_3(s_1, c_1, (i_2 + 1))  [(((select(s_1, i_2) # 0) /\ (select(s_1, i_2) # c_1)) /\ ((0 <= i_2 < size(s_1)) /\ (0 <= i_2 < size(s_1))))];
  u_3(s_1, c_1, i_2) -> u_2(s_1, c_1, i_2);
  u_2(s_1, c_1, i_2) -> return_1(s_1, select(s_1, i_2))  [((((select(s_1, i_2) = 0) \/ (select(s_1, i_2) = c_1)) /\ ((0 <= i_2 < size(s_1)) /\ (0 <= i_2 < size(s_1)))) /\ (0 <= i_2 < size(s_1)))];
  u_2(s_1, c_1, i_2) -> error_1  [((((select(s_1, i_2) = 0) \/ (select(s_1, i_2) = c_1)) /\ ((0 <= i_2 < size(s_1)) /\ (0 <= i_2 < size(s_1)))) /\ (0 > i_2 \/ i_2 >= size(s_1)))];
  main(length_1, nondetString_1) -> u_4(length_1, nondetString_1, rnd_1);
  u_4(length_1, nondetString_1, rnd_2) -> u_5(length_1, store(nondetString_1, (length_1 - 1), 0), rnd_2)  [(0 <= (length_1 - 1) < size(nondetString_1))];
  u_4(length_1, nondetString_1, rnd_2) -> error_2  [(0 > (length_1 - 1) \/ (length_1 - 1) >= size(nondetString_1))];
  u_5(length_1, nondetString_1, rnd_2) -> u_6(length_1, nondetString_1, rnd_2, cstrchr(nondetString_1, rnd_2));
  u_6(length_1, nondetString_1, rnd_2, return_1(w_3, w_2)) -> u_7(length_1, w_3, rnd_2, w_2);
  u_6(length_1, nondetString_1, rnd_2, error_1) -> error_2;
  u_7(length_1, nondetString_1, rnd_2, w_2) -> u_8(length_1, nondetString_1, rnd_2, w_2);
  u_8(length_1, nondetString_1, rnd_2, w_4) -> u_9(length_1, nondetString_1, rnd_2);
  u_9(length_1, nondetString_1, rnd_2) -> return_2(nondetString_1, 0);
  errortest(error_2) -> false;
  errortest(return_2(w_5, w_6)) -> true;

QUERY do-simplify [cstrchr main errortest] and equivalence errortest(main(length, nondetString)) -><- true [length >= 1 /\ size(nondetString) = length]

