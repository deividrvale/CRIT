THEORY arrays
LOGIC  QF_INTARRAY
SOLVER arrsolver

SIGNATURE
  main: IntArray * Int => result_1;
  u_1: IntArray * Int * Int => result_1;
  u_2: IntArray * Int * Int => result_1;
  u_3: IntArray * Int * Int => result_1;
  u_4: IntArray * Int * Int * Int => result_1;
  u_5: IntArray * Int * Int * Int * Int => result_1;
  u_6: IntArray * Int * Int * Int * Int * Int => result_1;
  u_7: IntArray * Int * Int * Int * Int * Int => result_1;
  u_8: IntArray * Int * Int * Int * Int * Int => result_1;
  u_9: IntArray * Int * Int * Int * Int * Int => result_1;
  error_1: result_1;
  u_10: IntArray * Int * Int * Int * Int * Int => result_1;
  u_11: IntArray * Int * Int * Int * Int * Int => result_1;
  u_12: IntArray * Int * Int * Int * Int * Int => result_1;
  u_13: IntArray * Int * Int * Int * Int * Int => result_1;
  u_14: IntArray * Int * Int * Int * Int * Int => result_1;
  u_15: IntArray * Int * Int * Int * Int * Int => result_1;
  u_16: IntArray * Int * Int * Int * Int * Int => result_1;
  u_17: IntArray * Int * Int * Int * Int * Int => result_1;
  u_18: IntArray * Int * Int => result_1;
  u_19: IntArray * Int * Int => result_1;
  u_20: IntArray * Int * Int => result_1;
  return_1: IntArray => result_1;
  errortest;

RULES
  main(a_1, array_size_1) -> u_1(a_1, array_size_1, rnd_1);
  u_1(a_1, array_size_1, i_2) -> u_2(a_1, array_size_1, i_2);
  u_2(a_1, array_size_1, i_2) -> u_3(a_1, array_size_1, 0);
  u_3(a_1, array_size_1, i_2) -> u_4(a_1, array_size_1, i_2, rnd_2)  [(i_2 < (array_size_1 - 1))];
  u_4(a_1, array_size_1, i_2, j_3) -> u_5(a_1, array_size_1, i_2, j_3, rnd_3);
  u_5(a_1, array_size_1, i_2, j_3, min_3) -> u_6(a_1, array_size_1, i_2, j_3, min_3, rnd_4);
  u_6(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> u_7(a_1, array_size_1, i_2, j_3, i_2, temp_3);
  u_7(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> u_8(a_1, array_size_1, i_2, j_3, min_3, temp_3);
  u_8(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> u_9(a_1, array_size_1, i_2, (i_2 + 1), min_3, temp_3);
  u_9(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> error_1  [((j_3 < array_size_1) /\ ((0 > j_3 \/ j_3 >= size(a_1)) \/ (0 > min_3 \/ min_3 >= size(a_1))))];
  u_9(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> u_10(a_1, array_size_1, i_2, j_3, j_3, temp_3)  [(((j_3 < array_size_1) /\ (select(a_1, j_3) < select(a_1, min_3))) /\ ((0 <= j_3 < size(a_1)) /\ (0 <= min_3 < size(a_1))))];
  u_10(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> u_11(a_1, array_size_1, i_2, j_3, min_3, temp_3);
  u_9(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> u_11(a_1, array_size_1, i_2, j_3, min_3, temp_3)  [(((j_3 < array_size_1) /\ (select(a_1, j_3) >= select(a_1, min_3))) /\ ((0 <= j_3 < size(a_1)) /\ (0 <= min_3 < size(a_1))))];
  u_11(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> u_12(a_1, array_size_1, i_2, j_3, min_3, temp_3);
  u_12(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> u_13(a_1, array_size_1, i_2, j_3, min_3, temp_3);
  u_13(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> u_14(a_1, array_size_1, i_2, (j_3 + 1), min_3, temp_3);
  u_14(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> u_9(a_1, array_size_1, i_2, j_3, min_3, temp_3);
  u_9(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> u_15(a_1, array_size_1, i_2, j_3, min_3, select(a_1, i_2))  [((j_3 >= array_size_1) /\ (0 <= i_2 < size(a_1)))];
  u_9(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> error_1  [((j_3 >= array_size_1) /\ (0 > i_2 \/ i_2 >= size(a_1)))];
  u_15(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> u_16(store(a_1, i_2, select(a_1, min_3)), array_size_1, i_2, j_3, min_3, temp_3)  [((0 <= min_3 < size(a_1)) /\ (0 <= i_2 < size(a_1)))];
  u_15(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> error_1  [((0 > min_3 \/ min_3 >= size(a_1)) \/ (0 > i_2 \/ i_2 >= size(a_1)))];
  u_16(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> u_17(store(a_1, min_3, temp_3), array_size_1, i_2, j_3, min_3, temp_3)  [(0 <= min_3 < size(a_1))];
  u_16(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> error_1  [(0 > min_3 \/ min_3 >= size(a_1))];
  u_17(a_1, array_size_1, i_2, j_3, min_3, temp_3) -> u_18(a_1, array_size_1, i_2);
  u_18(a_1, array_size_1, i_2) -> u_19(a_1, array_size_1, i_2);
  u_19(a_1, array_size_1, i_2) -> u_20(a_1, array_size_1, (i_2 + 1));
  u_20(a_1, array_size_1, i_2) -> u_3(a_1, array_size_1, i_2);
  u_3(a_1, array_size_1, i_2) -> return_1(a_1)  [(i_2 >= (array_size_1 - 1))];
  errortest(error_1) -> false;
  errortest(return_1(w_5)) -> true;

QUERY do-simplify [main errortest] and equivalence errortest(main(a, array_size)) -><- true [array_size >= 1 /\ size(a) = array_size]

